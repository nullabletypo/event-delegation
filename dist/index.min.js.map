{"version":3,"file":"index.min.js","sources":["../src/event-delegation.ts"],"sourcesContent":["export const closest = (root: Element, el: Element, sel: string) => {\n  // include root node\n  const parent = root.parentElement\n  do {\n    if (el.matches(sel)) return el\n    el = el.parentElement!\n  } while (el != null && el !== parent)\n  return null\n}\n\n// Disguise event.target as matched element\nexport const proxy = (ev: Event, target: any): Event => {\n  const get = (event: any, prop: string) => (prop === 'target' ? target : Reflect.get(event, prop))\n  return new Proxy(ev, { get })\n}\n\nexport const listener = (root: Element, sel: string, handler: Function) => (e: Event) => {\n  const target = e.target as Element\n  const matched = closest(root, target, sel)\n  if (matched != null) {\n    handler.call(matched, proxy(e, matched))\n  }\n}\n\ntype EventType = keyof HTMLElementEventMap\n\nexport interface EventDelegatorOptions extends AddEventListenerOptions {}\n\ntype Opts = EventDelegatorOptions\n\nexport class EventDelegator {\n  target: EventTarget\n  options?: Opts = {}\n  constructor(target: EventTarget, options: Opts = {}) {\n    this.target = target\n    this.options = options\n  }\n  /* eslint-disable no-dupe-class-members */\n  on<T extends Event>(type: EventType, sel: string, handler: (ev: T) => void, options?: Opts): () => void\n  on<T extends Event>(type: string, sel: string, handler: (ev: T) => void, options?: Opts): () => void\n  on<T extends Event>(type: EventType, sel: string, handler: (ev: T) => void, options?: Opts) {\n    options = { ...this.options, ...options }\n    const _listener = listener(this.target as Element, sel, handler)\n    this.target.addEventListener(type, _listener, options)\n    return () => this.target.removeEventListener(type, _listener, options)\n  }\n}\n\nexport const delegate = (el: EventTarget, defaultOptions?: Opts) => {\n  return new EventDelegator(el, defaultOptions)\n}\n\n/**\n * Shorthand of CustomEvent\n */\nexport const fire = (el: EventTarget, type: string, detail?: any) => {\n  const event = new CustomEvent(type, { bubbles: true, composed: true, cancelable: true, detail })\n  return el.dispatchEvent(event)\n}\n"],"names":["const","EventDelegator","constructor","target","options","on","type","sel","handler","Object","this","_listener","root","e","matched","el","parent","parentElement","matches","closest","call","Proxy","event","prop","Reflect","get","listener","addEventListener","removeEventListener","defaultOptions","detail","CustomEvent","bubbles","composed","cancelable","dispatchEvent"],"mappings":"AAAOA,IA8BMC,EAGXC,SAAYC,EAAqBC,kBAAgB,iBADhC,QAEVD,OAASA,OACTC,QAAUA,GAKjBC,YAAAA,YAAoBC,EAAiBC,EAAaC,EAA0BJ,cAC1EA,EAAUK,iBAAKC,KAAKN,eACdO,WA1BeC,EAAeL,EAAaC,mBAAuBK,OAL3CV,EAOzBW,WAlBgBF,EAAeG,EAAaR,OAE5CS,EAASJ,EAAKK,gBACjB,IACGF,EAAGG,QAAQX,GAAM,OAAOQ,EAC5BA,EAAKA,EAAGE,oBACK,MAANF,GAAcA,IAAOC,UACvB,KAWSG,CAAQP,EADTC,EAAEV,OACqBI,GACvB,MAAXO,GACFN,EAAQY,KAAKN,GATgBX,EASEW,EAP1B,IAAIO,MAOmBR,EAPT,cADRS,EAAYC,SAA2B,WAATA,EAAoBpB,EAASqB,QAAQC,IAAIH,EAAOC,SA8BvEG,CAAShB,KAAKP,OAAmBI,EAAKC,eACnDL,OAAOwB,iBAAiBrB,EAAMK,EAAWP,qBACjCM,EAAKP,OAAOyB,oBAAoBtB,EAAMK,EAAWP,+BAIzCW,EAAiBc,UACjC,IAAI5B,EAAec,EAAIc,0BAMXd,EAAiBT,EAAcwB,OAC5CR,EAAQ,IAAIS,YAAYzB,EAAM,CAAE0B,SAAS,EAAMC,UAAU,EAAMC,YAAY,SAAMJ,WAChFf,EAAGoB,cAAcb"}